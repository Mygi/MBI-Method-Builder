#!/bin/bash

#
# It wraps GnuPG, i.e. gpg. It encrypts files with the keys stores in user's ~/.gnupg/ directory. 
#

# check if gpg exists
if [[ -z `which gpg` ]]; then
	echo "Error: could not find gpg."
	exit 1
fi

# check if public key exists
PUB_KEY=`gpg --list-public-keys --with-colons | grep pub`
if [[ -z $PUB_KEY ]]; then
	echo "Error: public key not found. run \"gpg --gen-key\" to generate keys. See http://www.neuroimaging.org.au/cgi-bin/twiki/view/Main/EncryptAndDecryptFilesUsingGnuPG for detail."
	exit 1
fi
PUB_KEY_ID=`echo $PUB_KEY | tr -s ':' ' ' | awk '{print $5}'`
PUB_KEY_ID=${PUB_KEY_ID:8:15}


# check if the file to encrypt is specified
if [[ -z $1 ]]; then
	echo "Error: no input file is specifed."
	echo "Usage: `basename $0` <file> <decrypted-file>"
	echo "Usage: `basename $0` <file> <output-file>"
	exit 1
fi

INPUT=$1

# check if the output file is specified
if [[ -z $2 ]]; then
	echo "Error: no output file is specifed."
	echo "Usage: `basename $0` <file> <decrypted-file>"
	echo "Usage: `basename $0` <file> <output-file>"
	exit 1
fi

OUTPUT=$2

# encrypt the file
gpg -o $OUTPUT --decrypt -r $PUB_KEY_ID $INPUT
