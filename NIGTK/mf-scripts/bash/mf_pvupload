#!/bin/bash

function has_java () {
    MIN_VER=$1
    if [[ -z $MIN_VER ]]; then
        # defaults to java 5
        MIN_VER=5
    fi
    JAVA=`which java`
    if [[ -z $JAVA ]]; then
        echo "false"
        return
    fi
    VER=`java -version 2>&1 | grep "java version" | awk '{print $3}' | tr -d \" | awk '{split($0, array, ".")} END{print array[2]}'`
    if [[ $VER -lt $MIN_VER ]]; then
        echo "false"
        return
    fi
    echo "true"
}

# JAVA 5 is required
if [[ ! -z $JAVA_HOME ]]; then
	export PATH=$JAVA_HOME/bin:$PATH
fi
if [[ `has_java 5` == "false"]]; then
	echo 1>&2 "Error: could not find java 5+."
	exit 1
fi

# check if pvupload.jar is available.
PVUPLOAD_JAR=`dirname $0`/pvupload.jar
if [[ ! -e $PVUPLOAD_JAR ]]; then
	PVUPLOAD_JAR=`dirname $0`/lib/pvupload.jar
	if [[ ! -e $PVUPLOAD_JAR ]]; then
		echo 1>&2 "Error: could not find $PVUPLOAD_JAR."
		exit 1
	fi
fi

# check if MFLUX_HOST is set.
if [[ -z $MFLUX_HOST ]]; then
	echo 1>&2 "Error: env variable MFLUX_HOST is not set. you can e.g. export MFLUX_HOST=`hostname`"
	exit 1
fi

# check if MFLUX_TRANSPORT is set. Can be one of: HTTP, HTTPS, TCPIP
if [[ -z $MFLUX_TRANSPORT ]]; then
	echo 1>&2 "Error: env variable MFLUX_TRANSPORT is not set. you can e.g. export MFLUX_TRANSPORT=https"
	exit 1
fi

# check if MFLUX_PORT is set.
if [[ -z $MFLUX_PORT ]]; then
	echo 1>&2 "Error: env variable MFLUX_PORT is not set. you can e.g. export MFLUX_PORT=8443"
	exit 1
fi

# check and read MFLUX_DOMAIN.
if [[ -z $MFLUX_DOMAIN ]]; then
	read -p "MFLUX_DOMAIN: " MFLUX_DOMAIN
fi

# check and read MFLUX_USER.
if [[ -z $MFLUX_USER ]]; then
	read -p "MFLUX_USER: " MFLUX_USER
fi

# check and read MFLUX_PASSWORD.
if [[ -z $MFLUX_PASSWORD ]]; then
	if [[ ! -z $MFLUX_PASSWORD_ENC ]]; then
		MFLUX_PASSWORD=`echo $MFLUX_PASSWORD_ENC | openssl enc -d -base64`
	else 
		read -s -p "MFLUX_PASSWORD: " MFLUX_PASSWORD
	fi
fi

# The amount of time to wait to see if a corresponding DICOM series
# appears in the server. Specified in seconds.
MF_WAIT=60

# Uncomment the following to enable general tracing.
# MF_VERBOSE=-verbose

# Upload Bruker image to own DataSet
UPLOAD_IMAGE=1

# Upload Bruker FID to Image DataSet
UPLOAD_FID=2

# No compression of zip file (takes a long time and a lot of memory on EPT for large Bruker files; better to send to server uncompressed)
CLEVEL=0

# Upload
$JAVA -Dmf.host=$MFLUX_HOST -Dmf.port=$MFLUX_PORT -Dmf.transport=$MFLUX_TRANSPORT -Dmf.domain=$MFLUX_DOMAIN -Dmf.user=$MFLUX_USER -Dmf.password=$MFLUX_PASSWORD -jar $PVUPLOAD_JAR -wait $MF_WAIT $MF_VERBOSE $1 -clevel $CLEVEL -image $UPLOAD_IMAGE -fid $UPLOAD_FID

RETVAL=$?

exit $RETVAL
